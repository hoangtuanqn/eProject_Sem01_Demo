// Import th∆∞ vi·ªán axios ƒë·ªÉ th·ª±c hi·ªán c√°c HTTP requests
import axios from "axios";

// H√†m kh·ªüi t·∫°o ticker ƒë·ªÉ hi·ªÉn th·ªã th·ªùi gian v√† v·ªã tr√≠
export function initTicker() {
    // L·∫•y c√°c ph·∫ßn t·ª≠ DOM ƒë·ªÉ hi·ªÉn th·ªã th·ªùi gian v√† v·ªã tr√≠
    const dateTimeElement = document.getElementById("dateTime");
    const locationElement = document.getElementById("location");

    // H√†m c·∫≠p nh·∫≠t ng√†y gi·ªù
    function updateDateTime() {
        // T·∫°o ƒë·ªëi t∆∞·ª£ng Date ch·ª©a th·ªùi gian hi·ªán t·∫°i
        const now = new Date();

        // C·∫•u h√¨nh ƒë·ªãnh d·∫°ng hi·ªÉn th·ªã ng√†y gi·ªù
        const options = {
            weekday: "long", // Hi·ªÉn th·ªã t√™n ƒë·∫ßy ƒë·ªß c·ªßa th·ª©
            year: "numeric", // Hi·ªÉn th·ªã nƒÉm d·∫°ng s·ªë
            month: "long", // Hi·ªÉn th·ªã t√™n ƒë·∫ßy ƒë·ªß c·ªßa th√°ng
            day: "numeric", // Hi·ªÉn th·ªã ng√†y d·∫°ng s·ªë
            hour: "2-digit", // Hi·ªÉn th·ªã gi·ªù 2 ch·ªØ s·ªë
            minute: "2-digit", // Hi·ªÉn th·ªã ph√∫t 2 ch·ªØ s·ªë
            second: "2-digit", // Hi·ªÉn th·ªã gi√¢y 2 ch·ªØ s·ªë
        };

        // C·∫≠p nh·∫≠t n·ªôi dung hi·ªÉn th·ªã v·ªõi ƒë·ªãnh d·∫°ng ng√†y gi·ªù ƒë√£ c·∫•u h√¨nh
        dateTimeElement.textContent = now.toLocaleDateString("en-US", options);
    }

    // H√†m c·∫≠p nh·∫≠t v·ªã tr√≠
    function updateLocation() {
        // Ki·ªÉm tra tr√¨nh duy·ªát c√≥ h·ªó tr·ª£ geolocation kh√¥ng
        if (navigator.geolocation) {
            // L·∫•y v·ªã tr√≠ hi·ªán t·∫°i c·ªßa ng∆∞·ªùi d√πng
            navigator.geolocation.getCurrentPosition(
                // Callback khi l·∫•y v·ªã tr√≠ th√†nh c√¥ng
                (position) => {
                    const latitude = position.coords.latitude; // L·∫•y vƒ© ƒë·ªô
                    const longitude = position.coords.longitude; // L·∫•y kinh ƒë·ªô

                    // S·ª≠ d·ª•ng API Nominatim ƒë·ªÉ chuy·ªÉn ƒë·ªïi t·ªça ƒë·ªô th√†nh t√™n ƒë·ªãa ƒëi·ªÉm
                    axios
                        .get(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${latitude}&lon=${longitude}`)
                        .then(({ data }) => {
                            // L·∫•y t√™n th√†nh ph·ªë/th·ªã tr·∫•n/ti·ªÉu bang v√† qu·ªëc gia
                            const city = data.address.city || data.address.town || data.address.state;
                            const country = data.address.country;
                            // Hi·ªÉn th·ªã t√™n ƒë·ªãa ƒëi·ªÉm v√† qu·ªëc gia v·ªõi bi·ªÉu t∆∞·ª£ng ƒë·ªãnh v·ªã
                            locationElement.textContent = `üìç ${city}, ${country}`;
                        })
                        .catch(() => {
                            // N·∫øu kh√¥ng l·∫•y ƒë∆∞·ª£c t√™n ƒë·ªãa ƒëi·ªÉm, hi·ªÉn th·ªã th√¥ng b√°o l·ªói
                            locationElement.textContent = "üìç Unable to get location name. Please try again later.";
                        });
                },
                // Callback khi c√≥ l·ªói l·∫•y v·ªã tr√≠
                (error) => {
                    locationElement.textContent = "üìç Location not available";
                },
            );
        } else {
            // Th√¥ng b√°o n·∫øu tr√¨nh duy·ªát kh√¥ng h·ªó tr·ª£ geolocation
            locationElement.textContent = "üìç Geolocation is not supported";
        }
    }

    // C·∫≠p nh·∫≠t l·∫ßn ƒë·∫ßu khi kh·ªüi t·∫°o
    updateDateTime();
    updateLocation();

    // Thi·∫øt l·∫≠p c·∫≠p nh·∫≠t ƒë·ªãnh k·ª≥
    setInterval(updateDateTime, 1000); // C·∫≠p nh·∫≠t th·ªùi gian m·ªói gi√¢y
    setInterval(updateLocation, 300000); // C·∫≠p nh·∫≠t v·ªã tr√≠ m·ªói 5 ph√∫t
}
